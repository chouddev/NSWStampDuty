name: NSW Stamp Duty Test Pipeline

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'stamp-duty'
        type: choice
        options:
          - all
          - stamp-duty
          - headed
          - chrome
          - firefox
      clean_artifacts:
        description: 'Clean previous artifacts'
        required: true
        default: true
        type: boolean
      generate_reports:
        description: 'Generate detailed reports'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  CYPRESS_VERSION: '13.15.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: üìã Build Information
      run: |
        echo "üöÄ NSW Stamp Duty Test Pipeline"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Test Type: ${{ github.event.inputs.test_type || 'stamp-duty' }}"
    
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: üì¶ Install Dependencies
      run: |
        echo "Installing Node.js dependencies..."
        npm ci --prefer-offline --no-audit
        
        echo "Verifying Cypress installation..."
        npx cypress verify
    
    - name: üßπ Clean Artifacts
      if: ${{ github.event.inputs.clean_artifacts == 'true' }}
      run: |
        echo "Cleaning previous test artifacts..."
        rm -rf cypress/videos/* || true
        rm -rf cypress/screenshots/* || true
        rm -rf cypress/reports/* || true
        rm -rf cypress/downloads/* || true
    
    - name: üîç Code Quality Checks
      run: |
        echo "Running code quality checks..."
        echo "Checking for linting errors..."
        # Add your linting commands here
        
        echo "Running security audit..."
        npm audit --audit-level=moderate || true
    
    - name: üß™ Run Tests
      run: |
        echo "Running Cypress tests on ${{ matrix.browser }}..."
        ./run-tests.sh ${{ github.event.inputs.test_type || 'stamp-duty' }}
      env:
        CYPRESS_BROWSER: ${{ matrix.browser }}
    
    - name: üìä Generate Reports
      if: ${{ github.event.inputs.generate_reports == 'true' }}
      run: |
        echo "Generating test reports..."
        
        if [ -f "cypress/reports/.jsons/mochawesome_*.json" ]; then
          echo "Generating Mochawesome HTML report..."
          npx mochawesome-merge "cypress/reports/.jsons/*.json" > cypress/reports/merged-report.json
          npx marge cypress/reports/merged-report.json --reportDir cypress/reports --inline
        fi
    
    - name: üìÅ Archive Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          cypress/screenshots/
          cypress/videos/
          cypress/reports/
        retention-days: 30
    
    - name: üìà Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Cypress Tests (${{ matrix.browser }})
        path: cypress/reports/.jsons/*.json
        reporter: mocha-json
        fail-on-error: false
    
    - name: üìß Notification on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Test Results')
          );
          
          const commentBody = `## ‚ùå Tests Failed on ${{ matrix.browser }}
          
          **Build Information:**
          - Branch: \`${{ github.ref_name }}\`
          - Commit: \`${{ github.sha }}\`
          - Browser: \`${{ matrix.browser }}\`
          - Workflow: \`${{ github.workflow }}\`
          
          **Artifacts:**
          - Screenshots and videos are available in the Actions artifacts
          - Test reports: [View Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          Please check the test results and fix any issues.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üöÄ Deploy to Production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        echo "Deployment completed successfully!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì¢ Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#test-results'
        text: |
          NSW Stamp Duty Tests: ${{ job.status }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Configure in repository secrets
